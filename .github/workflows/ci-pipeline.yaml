name: Java CI

on:
  push:
    branches:
      - main
      - 'release/*'
  pull_request:
    branches:
      - main

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        java-version: [17]

    steps:
      # Checkout repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up JDK
      - name: Set up JDK ${{ matrix.java-version }}
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: ${{ matrix.java-version }}

      # Cache Maven dependencies
      - name: Cache Maven local repository
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # Build and run tests
      - name: Build with Maven
        run: mvn clean install -B -V -DskipTests

      - name: Run Config Server and Tests
        env:
          MAVEN_OPTS: "--add-opens=java.base/java.util.concurrent=ALL-UNNAMED"
        run: |
          # Start config server in background
          cd examples
          mvn -f spring-cloud-config-server spring-boot:run -Dspotless.skip=true &
          SERVER_PID=$!

          # Wait until server is ready (polling HTTP)
          echo "Waiting for Config Server to be ready..."
          until curl -s http://localhost:8888/ > /dev/null; do
            echo "Config Server not ready yet, sleeping 2s..."
            sleep 2
          done
          echo "Config Server is up!"

          # Run Maven tests
          mvn test

          # Kill the background server
          kill $SERVER_PID

      - name: Generate JaCoCo Test Report
        env:
          MAVEN_OPTS: "--add-opens=java.base/java.util.concurrent=ALL-UNNAMED"
        run: mvn verify

      - name: Upload JaCoCo HTML Reports
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-report
          path: |
            ./core/target/site/jacoco/

      # Optional: Check license headers with Spotless
      - name: Check code formatting / license headers
        run: mvn spotless:check